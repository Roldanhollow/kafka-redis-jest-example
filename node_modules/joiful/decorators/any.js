"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("./common");
function getAnySchemaModifierProviders(getJoi) {
    const result = {
        allow: (value, ...values) => ({ schema }) => schema.allow(value, ...values),
        valid: (value, ...values) => ({ schema }) => schema.valid(value, ...values),
        only: (value, ...values) => ({ schema }) => schema.only(value, ...values),
        equal: (value, ...values) => ({ schema }) => schema.equal(value, ...values),
        required: () => ({ schema }) => schema.required(),
        optional: () => ({ schema }) => schema.optional(),
        invalid: (value, ...values) => ({ schema }) => schema.invalid(value, ...values),
        disallow: (value, ...values) => ({ schema }) => schema.disallow(value, ...values),
        not: (value, ...values) => ({ schema }) => schema.not(value, ...values),
        forbidden: () => ({ schema }) => schema.forbidden(),
        strip: () => ({ schema }) => schema.strip(),
        description: (description) => ({ schema }) => schema.description(description),
        notes: (notes) => ({ schema }) => schema.notes(notes),
        tags: (tag, ...tags) => ({ schema }) => schema.tags(tag instanceof Array ? [...tag, ...tags] : [tag, ...tags]),
        meta: (meta) => ({ schema }) => schema.meta(meta),
        example: (value) => ({ schema }) => schema.example(value),
        unit: (name) => ({ schema }) => schema.unit(name),
        options: (options) => ({ schema }) => schema.options(options),
        strict: (isStrict = true) => ({ schema }) => schema.strict(isStrict),
        default: (value) => ({ schema }) => schema.default(value),
        label: (label) => ({ schema }) => schema.label(label),
        raw: (isRaw = true) => ({ schema }) => schema.raw(isRaw),
        empty: (schema) => ({ schema: existingSchema }) => existingSchema.empty(schema),
        error: (err) => ({ schema }) => {
            if (!schema.error) {
                throw new common_1.NotImplemented('Joi.error');
            }
            return schema.error(err);
        },
        custom: (schemaBuilder) => ({ schema }) => schemaBuilder({ schema, joi: getJoi() }),
    };
    return result;
}
exports.getAnySchemaModifierProviders = getAnySchemaModifierProviders;
exports.createAnyPropertyDecorator = (joifulOptions) => (common_1.createPropertyDecorator()(({ joi }) => joi.any(), getAnySchemaModifierProviders, joifulOptions));
//# sourceMappingURL=any.js.map